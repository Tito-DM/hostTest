{"version":3,"sources":["components/Navegation/Navegation.js","components/SlideShow/SlideShow.js","components/FloatingButtom/FloatingButtom.js","App.js","serviceWorker.js","index.js"],"names":["Navegation","className","href","id","SlideShow","document","addEventListener","elems","querySelectorAll","M","Carousel","init","fullWidth","indicators","duration","useState","title","subtitle","img","map","s","i","key","src","FloatingButtom","FloatingActionButton","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAqBeA,G,kBAjBI,WAClB,OACC,gCACC,6BACC,yBAAKC,UAAU,eACb,uBAAGC,KAAK,IAAID,UAAU,oBAAtB,QACA,wBAAIE,GAAG,aAAaF,UAAU,6BAC5B,4BAAI,uBAAGC,KAAK,aAAR,SACJ,4BAAI,uBAAGA,KAAK,eAAR,eACJ,4BAAI,uBAAGA,KAAK,oBAAR,qB,uBC+CGE,EAxDG,WACjBC,SAASC,iBAAiB,oBAAoB,WAC7C,IAAIC,EAAQF,SAASG,iBAAiB,aAMtBC,IAAEC,SAASC,KAAKJ,EALpB,CACXK,WAAW,EACXC,YAAY,EACZC,SAAU,SANW,MAWWC,mBAAS,CAC1C,CAECC,MAAO,0CACPC,SAAU,2BAEX,CACCC,IAAK,mCACLF,MAAO,2BACPC,SAAU,gCAEX,CACCC,IAAK,mCACLF,MAAO,iBACPC,SAAU,qCAEX,CACCC,IAAK,mDACLF,MAAO,uBACPC,SAAU,2BA9BW,mBAWhBb,EAXgB,UAkCvB,OACC,yBAAKH,UAAU,+BACd,wBAAIA,UAAU,qBACZG,EAAUe,KAAI,SAACC,EAAGC,GAAJ,OACd,wBAAIC,IAAKD,GACR,yBAAKE,IAAKH,EAAEF,MACZ,yBAAKjB,UAAU,uBACd,wBAAIA,UAAU,6CACZmB,EAAEJ,OAEJ,wBAAIf,UAAU,6CACZmB,EAAEH,eATR,O,qDCDYO,E,4LAlCbnB,SAASC,iBAAiB,oBAAoB,WAC7C,IAAIC,EAAQF,SAASG,iBAAiB,qBACtBC,IAAEgB,qBAAqBd,KAAKJ,Q,+BAI7C,OACC,yBAAKN,UAAU,qBACd,uBAAGA,UAAU,oCACZ,uBAAGA,UAAU,wBAAb,cAED,4BACC,4BACC,uBAAGA,UAAU,sBACZ,uBAAGA,UAAU,kBAAb,iBAGF,4BACC,uBAAGA,UAAU,oBACZ,uBAAGA,UAAU,qBAGf,4BACC,uBAAGA,UAAU,qBACZ,uBAAGA,UAAU,8B,GA1BSyB,IAAMC,WCYpBC,MAVf,WACC,OACC,yBAAK3B,UAAU,OACd,kBAAC,EAAD,MACC,kBAAC,EAAD,MACD,kBAAC,EAAD,QCEiB4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9B,SAAS+B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0b1ea72f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"materialize-css/dist/css/materialize.min.css\";\r\n\r\n\r\nconst Navegation = () => {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<nav>\r\n    <div className=\"nav-wrapper\">\r\n      <a href=\"#\" className=\"brand-logo right\">Logo</a>\r\n      <ul id=\"nav-mobile\" className=\"left hide-on-med-and-down\">\r\n        <li><a href=\"sass.html\">Sass</a></li>\r\n        <li><a href=\"badges.html\">Components</a></li>\r\n        <li><a href=\"collapsible.html\">JavaScript</a></li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nexport default Navegation;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport M from \"materialize-css\";\r\n\r\nconst SlideShow = () => {\r\n\tdocument.addEventListener('DOMContentLoaded', function() {\r\n\t\tvar elems = document.querySelectorAll('.carousel');\r\n\t\tvar option ={\r\n\t\t\tfullWidth: true,\r\n\t\t\tindicators: true,\r\n\t\t\tduration: 100\r\n\t\t}\r\n\t\tvar instances = M.Carousel.init(elems,option);\r\n\t\t\r\n\t  });\r\n\tconst [SlideShow, setSlideShow] = useState([\r\n\t\t{\r\n\t\t\t\r\n\t\t\ttitle: \"Projectando um Futuro Melhor e saudavel\",\r\n\t\t\tsubtitle: \"Para Ti e a Sua Familia\"\r\n\t\t},\r\n\t\t{\r\n\t\t\timg: \"img/16 CASAS- PROJET. EXT 33.jpg\",\r\n\t\t\ttitle: \"Projectos Residências\",\r\n\t\t\tsubtitle: \"Segurança &amp; Bem-Estar\"\r\n\t\t},\r\n\t\t{\r\n\t\t\timg: \"img/16 CASAS- PROJET. INT 01.jpg\",\r\n\t\t\ttitle: \"Design Interno\",\r\n\t\t\tsubtitle: \"Dando Vida a Tua Habitação.\"\r\n\t\t},\r\n\t\t{\r\n\t\t\timg: \"img/RESORT-NELSON TITO ARQ- TRAÇO VIVO 11.jpg\",\r\n\t\t\ttitle: \"Projectos Comerciais\",\r\n\t\t\tsubtitle: \"Lazer &amp; Bem-Estar\"\r\n\t\t}\r\n\t]);\r\n\r\n\treturn (\r\n\t\t<div className=\"slider fullscreen fix-slide\">\r\n\t\t\t<ul className=\"slides filter_img\">\r\n\t\t\t\t{SlideShow.map((s, i) => (\r\n\t\t\t\t\t<li key={i}>\r\n\t\t\t\t\t\t<img src={s.img} />\r\n\t\t\t\t\t\t<div className=\"caption right-align\">\r\n\t\t\t\t\t\t\t<h3 className=\"light grey-text text-lighten-3 slide-text\">\r\n\t\t\t\t\t\t\t\t{s.title}\r\n\t\t\t\t\t\t\t</h3>\r\n\t\t\t\t\t\t\t<h5 className=\"light grey-text text-lighten-3 slide-text\">\r\n\t\t\t\t\t\t\t\t{s.subtitle}\r\n\t\t\t\t\t\t\t</h5>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t))}\r\n\t\t\t\t;\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SlideShow;\r\n","import React from \"react\";\r\nimport M from \"materialize-css/dist/js/materialize.min.js\";\r\n\r\nclass FloatingButtom extends React.Component {\r\n\tcomponentDidMount() {\r\n\t\tdocument.addEventListener('DOMContentLoaded', function() {\r\n\t\t\tvar elems = document.querySelectorAll('.fixed-action-btn');\r\n\t\t\tvar instances = M.FloatingActionButton.init(elems);\r\n\t\t  });\r\n    }\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"fixed-action-btn \">\r\n\t\t\t\t<a className=\"btn-floating btn-large red pulse\">\r\n\t\t\t\t\t<i className=\"large material-icons\">mode_edit</i>\r\n\t\t\t\t</a>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<a className=\"btn-floating green\">\r\n\t\t\t\t\t\t\t<i className=\"material-icons\">location_on</i>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<a className=\"btn-floating red\">\r\n\t\t\t\t\t\t\t<i className=\"fab fa-youtube\"></i>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<a className=\"btn-floating blue\">\r\n\t\t\t\t\t\t\t<i className=\"fab fa-facebook-f\"></i>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\nexport default FloatingButtom;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Navegation from \"../src/components/Navegation/Navegation\";\nimport SlideShow from \"../src/components/SlideShow/SlideShow\";\nimport FloatingButtom from \"../src/components/FloatingButtom/FloatingButtom\";\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Navegation />\n\t\t\t <SlideShow /> \n\t\t\t<FloatingButtom />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}